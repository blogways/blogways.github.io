I"64<h3 id="一概述">一、概述###</h3>
<p><code class="language-plaintext highlighter-rouge">Apache Commons Lang</code>库提供了标准Java库函数里所没有提供的Java核心类的操作方法。<code class="language-plaintext highlighter-rouge">Apache Commons Lang</code>为java.lang API提供了大量的辅助工具，尤其是在String操作方法，基础数值方法，对象引用，并发行，创建及序列化，系统属性方面。</p>

<p>Lang3.0及其后续版本使用的包名为<code class="language-plaintext highlighter-rouge">org.apache.commons.lang3</code>，而之前的版本为<code class="language-plaintext highlighter-rouge">org.apache.commons.lang</code>，允许其在被使用的同时作为一个较早的版本。</p>

<p><code class="language-plaintext highlighter-rouge">Apache Commons Lang 3.3 API</code>包列表：</p>
<blockquote>
  <ul>
    <li>org.apache.commons.lang3</li>
    <li>org.apache.commons.lang3.builder</li>
    <li>org.apache.commons.lang3.concurrent</li>
    <li>org.apache.commons.lang3.event</li>
    <li>org.apache.commons.lang3.exception</li>
    <li>org.apache.commons.lang3.math</li>
    <li>org.apache.commons.lang3.mutable</li>
    <li>org.apache.commons.lang3.reflect</li>
    <li>org.apache.commons.lang3.text</li>
    <li>org.apache.commons.lang3.text.translate</li>
    <li>org.apache.commons.lang3.time</li>
    <li>org.apache.commons.lang3.tuple</li>
  </ul>
</blockquote>

<h3 id="二下载">二、下载###</h3>
<p>官方下载页:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://http://commons.apache.org/proper/commons-lang/download_lang.cgi 源码:

svn checkout http://svn.apache.org/repos/asf/commons/proper/pool/trunk commons-pool2
</code></pre></div></div>

<p>Maven工程依赖：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
	&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
  		&lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;
  		&lt;version&gt;3.3&lt;/version&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<h3 id="三使用说明">三、使用说明###</h3>
<h4 id="31-orgapachecommonslang3">3.1 org.apache.commons.lang3####</h4>
<p>此包提供了高度可重用静态的工具方法，主要是对<code class="language-plaintext highlighter-rouge">java.lang</code>类的一些补充。</p>

<p>由于此包中方法绝大多数都为静态的，因此__不需要创建实例化相应的对象__，而是通过类名__直接调用__需要的方法。</p>

<p><code class="language-plaintext highlighter-rouge">ArrayUtils</code>是一个对数组进行特殊处理的类。当然 <code class="language-plaintext highlighter-rouge">jdk</code>中的<code class="language-plaintext highlighter-rouge">Arrays</code>是有一些功能的，<code class="language-plaintext highlighter-rouge">Array</code>也提供了一些动态访问 <code class="language-plaintext highlighter-rouge">java</code>数组的方法，这里的<code class="language-plaintext highlighter-rouge">ArrayUtils</code>扩展提供了更多的功能。</p>

<p>下面是<code class="language-plaintext highlighter-rouge">indexOf</code>方法的具体实现，用以从指定的<code class="language-plaintext highlighter-rouge">startIndex</code>开始，从数组<code class="language-plaintext highlighter-rouge">array</code>中返回第一个值为<code class="language-plaintext highlighter-rouge">valueToFind</code>的下标。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public static int indexOf(final double[] array, final double valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex &lt; 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i &lt; array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}
</code></pre></div></div>

<p>在使用此方法的时候__不应该__：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ArrayUtils au = new ArrayUtils();
au.indexOf(array,valueToFind,startIndex);
</code></pre></div></div>

<p><strong>正确的使用方式</strong>：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ArrayUtils.indexOf(array,valueToFind,startIndex);
</code></pre></div></div>

<p>一个比较完整的例子：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>package wz.lang3.test;

import org.apache.commons.lang3.ArrayUtils;
public class arrayutilstest 
{
	public static void main(String[] args)
	{
		double[] array = {1.23,2.34,3.45,4.56,5.67,6.78,7.89,8.90};
		
		int result = ArrayUtils.indexOf(array, 5.67, 3);
		
		System.out.println(result);
	}
} 
//输出结果：4
</code></pre></div></div>

<p>以下是网络实例：
<strong>[ArrayUtils实例][]</strong>！
<strong>[StringUtils实例][]</strong>！
[ArrayUtils实例]: http://www.blogjava.net/sean/archive/2005/07/30/8775.html “ArrayUtils实例”
[StringUtils实例]: http://www.blogjava.net/sean/archive/2005/07/30/8776.html “StringUtils实例”</p>

<p>其他的一些类的用途：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">AnnotationUtils</code>用于辅助处理注释实例。</li>
  <li><code class="language-plaintext highlighter-rouge">CharSetUtils</code>用于操作字符集实例。</li>
  <li><code class="language-plaintext highlighter-rouge">CharUtils</code>用于操作字符基本类型及字符类对象。</li>
  <li><code class="language-plaintext highlighter-rouge">StringUtils</code>用于实现对字符串的操作，处理null输入。</li>
  <li><strong>[其他类][OtherClass]</strong>。
[OtherClass]: http://commons.apache.org/proper/commons-lang/javadocs/api-release/index.html “Org.apache.commons.lang3类列表”</li>
</ul>

<h4 id="32-orgapachecommonslang3builder">3.2 org.apache.commons.lang3.builder####</h4>
<p>辅助实现<code class="language-plaintext highlighter-rouge">equals(Object)</code>，<code class="language-plaintext highlighter-rouge">toString()</code>，<code class="language-plaintext highlighter-rouge">hashCode()</code>, 和 <code class="language-plaintext highlighter-rouge">compareTo(Object)</code>方法，
在这个包里面一共有7个类：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">CompareToBuilder</code> : 用于辅助实现<code class="language-plaintext highlighter-rouge">Comparable.compareTo(Object)</code>方法；</li>
  <li><code class="language-plaintext highlighter-rouge">EqualsBuilder</code> : 用于辅助实现<code class="language-plaintext highlighter-rouge">Object.equals(Object)</code>方法；</li>
  <li><code class="language-plaintext highlighter-rouge">HashCodeBuilder</code> : 用于辅助实现<code class="language-plaintext highlighter-rouge">Object.hashCode()</code>方法；</li>
  <li><code class="language-plaintext highlighter-rouge">ToStringBuilder</code> : 用于辅助实现<code class="language-plaintext highlighter-rouge">Object.toString()</code>方法；</li>
  <li><code class="language-plaintext highlighter-rouge">ReflectionToStringBuilder</code> : 使用反射机制辅助实现<code class="language-plaintext highlighter-rouge">Object.toString()</code>方法；</li>
  <li><code class="language-plaintext highlighter-rouge">ToStringStyle</code> : 辅助<code class="language-plaintext highlighter-rouge">ToStringBuilder</code>控制输出格式；</li>
  <li><code class="language-plaintext highlighter-rouge">StandardToStringStyle</code> : 辅助<code class="language-plaintext highlighter-rouge">ToStringBuilder</code>控制标准格式。</li>
</ul>

<p>在我们的日常编码过程当中，经常会使用到比较两个对象是否相等、比较大小、取hash、获取对象信息等。但是在实现这些方法的具体代码当中，稍微有点不注意就会出现一些BUG，而且有些往往还非常难以发现，因此<code class="language-plaintext highlighter-rouge">org.apache.commons.lang3.builder</code>中提供的这些用于辅助实现上述功能的方法就比较好了，有了这些类，就可以更好、更快、更方便的实现上述方法。</p>

<p>以下例子来自网络：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//利用反射机制的版本自动化实现需要的功能
//比较两个对象
public int compareTo(Object o) {
    return CompareToBuilder.reflectionCompare(this, o);
}
//判断相等
public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o);
}
//取hash
public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
}
//获取基本信息
public String toString() {
    return ReflectionToStringBuilder.toString(this);
}
</code></pre></div></div>

<p>详细例子__[请参考][]__！
[请参考]: http://www.blogjava.net/sean/archive/2005/07/30/8781.html “org.apache.commons.lang.builder”</p>

<h4 id="33-orgapachecommonslang3time">3.3 org.apache.commons.lang3.time####</h4>
<p>用于提供操作时间（Date）和日期（Duration）的方法和类，在这个包里面一共有7个类：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DateFormatUtils</code> ： 提供格式化日期和时间的功能及相关常量，</li>
  <li><code class="language-plaintext highlighter-rouge">DateUtils</code> ： 在Calendar和Date的基础上提供更方便的访问，</li>
  <li><code class="language-plaintext highlighter-rouge">DurationFormatUtils</code> ： 提供格式化时间跨度的功能及相关常量，</li>
  <li><code class="language-plaintext highlighter-rouge">FastDateFormat</code> ： 为java.text.SimpleDateFormat提供一个的线程安全的替代类，</li>
  <li><code class="language-plaintext highlighter-rouge">FastDateParser</code> ： 为java.text.SimpleDateFormat提供一个的线程安全的替代类，</li>
  <li><code class="language-plaintext highlighter-rouge">FastDatePrinter</code> ： 为java.text.SimpleDateFormat提供一个的线程安全的替代类，</li>
  <li><code class="language-plaintext highlighter-rouge">StopWatch</code> ： 提供一套方便的计时器的API。</li>
</ul>

<p>这些包除了<code class="language-plaintext highlighter-rouge">StopWatch</code>，其他的因为都是不可变的，所以是__线程安全__的，此包包含了一些操作时间的基础工具。更<code class="language-plaintext highlighter-rouge">Apache Commons Lang</code>中的其他的大部分类一样，此包中的方法基本均为<code class="language-plaintext highlighter-rouge">static</code>方法，应该__直接使用类名调用__相应的方法予以实现相应的功能。</p>

<p>以下例子来自网络：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>package sean.study.jakarta.commons.lang;
import java.util.Calendar;
import java.util.Date;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.*;
public class DateTimeUsage 
{
    public static void main(String[] args) 
	{
        demoDateUtils();
        demoStopWatch();
    }
    public static void demoDateUtils() 
	{

        System.out.println(StringUtils.center(" demoDateUtils ", 30, "="));
        Date date = new Date();
        String isoDateTime = DateFormatUtils.ISO_DATETIME_FORMAT.format(date);
        String isoTime = DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(date);
        FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM");
        String customDateTime = fdf.format(date);
        System.out.println("ISO_DATETIME_FORMAT: " + isoDateTime);
        System.out.println("ISO_TIME_NO_T_FORMAT: " + isoTime);
        System.out.println("Custom FastDateFormat: " + customDateTime);
        System.out.println("Default format: " + date);
        System.out.println("Round HOUR: " + DateUtils.round(date, Calendar.HOUR));
        System.out.println("Truncate HOUR: " + DateUtils.truncate(date, Calendar.HOUR));
        System.out.println();
    }
    public static void demoStopWatch() 
	{

        System.out.println(StringUtils.center(" demoStopWatch ", 30, "="));
        StopWatch sw = new StopWatch();
        sw.start();
        operationA();
        sw.stop();
        System.out.println("operationA used " + sw.getTime() + " milliseconds.");
        System.out.println();
    }
    public static void operationA() 
	{
        try {
            Thread.sleep(999);
        }
        catch (InterruptedException e) {
            // do nothing
        }
    }
}
</code></pre></div></div>

<p>输出结果：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>======= demoDateUtils ========
ISO_DATETIME_FORMAT: 2005-08-01T12:41:51
ISO_TIME_NO_T_FORMAT: 12:41:51
Custom FastDateFormat: 2005-08
Default format: Mon Aug 01 12:41:51 CST 2005
Round HOUR: Mon Aug 01 13:00:00 CST 2005
Truncate HOUR: Mon Aug 01 12:00:00 CST 2005
======= demoStopWatch ========
operationA used 1000 milliseconds.
</code></pre></div></div>
:ET