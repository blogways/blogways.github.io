I"h_<p>使用webpack对原有web工程进行改造，遇到各种问题，适当地使用各种loader加以解决。感觉有些问题具备普遍性，还是有必要记录一下的。故有此文！</p>

<p>在webpack中对javascript的管理也是模块化管理，所以需要使用<code class="language-plaintext highlighter-rouge">require</code>和<code class="language-plaintext highlighter-rouge">exports</code>或者<code class="language-plaintext highlighter-rouge">define</code>来对js模块进行引用或者导出。</p>

<p>当你的前端web工程没有采用js模块化编码，那么就会遇到一些问题。问题的根源分为两种：js的调用者，没有<code class="language-plaintext highlighter-rouge">require</code>；js的提供者，没有<code class="language-plaintext highlighter-rouge">exports</code>。</p>

<p>此时，你一个个文件去修改，按规范添加<code class="language-plaintext highlighter-rouge">require</code>和<code class="language-plaintext highlighter-rouge">exports</code>，当然可以解决这些问题。你也可以使用webpack提供的各种<code class="language-plaintext highlighter-rouge">loader</code>去解决这些问题。</p>

<p>下面，我们分情况讨论解决。</p>

<h2 id="一和jquery相关的那些事儿">一、和jQuery相关的那些事儿</h2>

<p><code class="language-plaintext highlighter-rouge">jQuery</code>本身并没有问题，自身代码里兼容了<code class="language-plaintext highlighter-rouge">exports</code>和<code class="language-plaintext highlighter-rouge">define</code>方法。</p>

<p>只是，很多依赖<code class="language-plaintext highlighter-rouge">jQuery</code>模块的js文件，都没有<code class="language-plaintext highlighter-rouge">require('jquery')</code>，导致文件内的<code class="language-plaintext highlighter-rouge">jQuery</code>对象不可识别。</p>

<p>比如<code class="language-plaintext highlighter-rouge">Bootstrap v3.3.2</code>，走上来，就是如下代码：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">jQuery</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">undefined</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Bootstrap</span><span class="se">\'</span><span class="s1">s JavaScript requires jQuery</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>作为模块化调用，当然无法识别<code class="language-plaintext highlighter-rouge">jQuery</code>了。</p>

<p>解决方法有三个：</p>

<h3 id="1-方法一采用import-loader">1. 方法一：采用<code class="language-plaintext highlighter-rouge">import-loader</code></h3>

<p><strong>1.1 解决方法</strong></p>

<p>在加载<code class="language-plaintext highlighter-rouge">bootstrap.js</code>时，使用<code class="language-plaintext highlighter-rouge">imports-loader</code>,
代码如下：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">imports?jQuery=jquery!bootstrap/dist/js/bootstrap</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>好了，可以正常使用<code class="language-plaintext highlighter-rouge">bootstrap.js</code>了！</p>

<p><strong>1.2 原理</strong></p>

<p>imports-loader会在bootstrap的源码前面，注入如下代码:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*** IMPORTS FROM imports-loader ***/</span>
<span class="kd">var</span> <span class="nx">jQuery</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">jquery</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>1.3 使用说明:</strong></p>

<table>
  <thead>
    <tr>
      <th>查询参数</th>
      <th>等效代码</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">angular</code></td>
      <td><code class="language-plaintext highlighter-rouge">var angular = require('angular');</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">$=jquery</code></td>
      <td><code class="language-plaintext highlighter-rouge">var $ = require('jquery');</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">config=&gt;{size:50}</code></td>
      <td><code class="language-plaintext highlighter-rouge">var config = {size:50};</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">this=&gt;window</code></td>
      <td><code class="language-plaintext highlighter-rouge">(function(){...}).call(window);</code></td>
    </tr>
  </tbody>
</table>

<p>支持一次多个查询参数，之间通过逗号分隔，比如：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">imports?$=jquery,jQuery=jquery,angular,config=&gt;{size:50}!./file.js</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="2-方法二采用expose-loader">2. 方法二：采用<code class="language-plaintext highlighter-rouge">expose-loader</code></h3>

<p><code class="language-plaintext highlighter-rouge">expose-loader</code>的思路是将某个对象暴露成一个全局变量。</p>

<p>具体到这个问题中，就是把<code class="language-plaintext highlighter-rouge">jQuery</code>对象暴露成全局变量。这样，那些<code class="language-plaintext highlighter-rouge">bootstrap.js</code>之类的文件就都能访问这个变量了。</p>

<p>具体做法，修改<code class="language-plaintext highlighter-rouge">webpack.config.js</code>文件:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">module:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="err">loaders:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="err">test:</span><span class="w"> </span><span class="err">require.resolve(</span><span class="s2">"jquery"</span><span class="err">)</span><span class="p">,</span><span class="w"> </span><span class="err">loader:</span><span class="w"> </span><span class="s2">"expose?$!expose?jQuery"</span><span class="w"> </span><span class="p">},</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="3-方法三使用webpackprovideplugin">3. 方法三：使用<code class="language-plaintext highlighter-rouge">webpack.ProvidePlugin</code></h3>

<p>具体做法，修改<code class="language-plaintext highlighter-rouge">webpack.config.js</code>文件：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">plugins:</span><span class="w"> </span><span class="p">[</span><span class="w">   
    </span><span class="err">new</span><span class="w"> </span><span class="err">webpack.ProvidePlugin(</span><span class="p">{</span><span class="w">
        </span><span class="err">$:</span><span class="w"> </span><span class="s2">"jquery"</span><span class="p">,</span><span class="w">
        </span><span class="err">jQuery:</span><span class="w"> </span><span class="s2">"jquery"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"window.jQuery"</span><span class="p">:</span><span class="w"> </span><span class="s2">"jquery"</span><span class="w">
    </span><span class="p">}</span><span class="err">)</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<h3 id="4-小节">4. 小节</h3>

<p>从上面的介绍可以看出，三种解决方法的思路分两类：方法一，是修改调用者；方法二、三是修改提供者。</p>

<h2 id="二自定义的js文件">二、自定义的js文件</h2>

<p>这里问题，属于模块提供方没有调用<code class="language-plaintext highlighter-rouge">export</code>导出模块，或者没有<code class="language-plaintext highlighter-rouge">define</code>定义模块。</p>

<p>好办，使用<code class="language-plaintext highlighter-rouge">exports-loader</code>!这个作用和前面提到的<code class="language-plaintext highlighter-rouge">imports-loader</code>类似，他是在文件的最后添加一行，类似如下的代码：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*** EXPORTS FROM exports-loader ***/</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">YouModule</span>
</code></pre></div></div>

<p>同样，如果需要一次导出多个对象，如同<code class="language-plaintext highlighter-rouge">imports-loader</code>调用，多个对象间也是逗号分隔。比如：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>require("exports?file,parse=helpers.parse!./file.js");
</code></pre></div></div>

<p>那么，<code class="language-plaintext highlighter-rouge">./file.js</code>文件的最后会添加如下代码：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*** EXPORTS FROM exports-loader ***/</span>
<span class="nx">exports</span><span class="p">[</span><span class="dl">"</span><span class="s2">file</span><span class="dl">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nx">file</span><span class="p">);</span>
<span class="nx">exports</span><span class="p">[</span><span class="dl">"</span><span class="s2">parse</span><span class="dl">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nx">helpers</span><span class="p">.</span><span class="nx">parse</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="三稍微复杂一点的情况">三、稍微复杂一点的情况</h2>

<p>自定义的多个js模块直接存在相互调用的情况。</p>

<p>比如，<code class="language-plaintext highlighter-rouge">b.js</code>里面调用了<code class="language-plaintext highlighter-rouge">a.js</code>提供的对象，但是都没有<code class="language-plaintext highlighter-rouge">exports</code>或者<code class="language-plaintext highlighter-rouge">require</code>。见示例：</p>

<p>文件： <code class="language-plaintext highlighter-rouge">a.js</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">A</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span> <span class="p">};</span>
</code></pre></div></div>

<p>文件: <code class="language-plaintext highlighter-rouge">b.js</code></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">A</span><span class="p">.</span><span class="nx">exec</span><span class="p">(....)</span>
</code></pre></div></div>

<p>解决办法：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>require([
	'expose?A!exports?A!./a.js',
	'./b.js'
], ...);
</code></pre></div></div>

<p>如上，把<code class="language-plaintext highlighter-rouge">a.js</code>中的A定义成全景对象公布出去，这样<code class="language-plaintext highlighter-rouge">b.js</code>里面就可以正常使用<code class="language-plaintext highlighter-rouge">A</code>对象了。</p>

<p>除此之外，还有一个解决方案（不推荐）：使用<code class="language-plaintext highlighter-rouge">script-loader</code>，它可以在全局环境下执行一次指定的脚本，比如：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">require</span><span class="p">([</span>
	<span class="dl">'</span><span class="s1">script!./a.js</span><span class="dl">'</span><span class="p">,</span>
	<span class="dl">'</span><span class="s1">./b.js</span><span class="dl">'</span>
<span class="p">],</span> <span class="p">...);</span>
</code></pre></div></div>

<p>这里，会把<code class="language-plaintext highlighter-rouge">./a.js</code>直接作为脚本执行一次。在<code class="language-plaintext highlighter-rouge">node.js</code>环境下，<code class="language-plaintext highlighter-rouge">script-loader</code>什么都不做。</p>

<h2 id="四其他">四、其他</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">file-loader</code> : 修改文件名，放在输出目录下，并返其对应的 url .</p>

    <p>默认修改后的文件名，是文件内容的MD5哈希串。你也可以自定义文件名。比如：</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">file?name=js/[hash].script.[ext]!./javascript.js</span><span class="dl">"</span><span class="p">);</span>
 <span class="c1">// =&gt; js/0dcbbaa701328a3c262cfd45869e351f.script.js</span>

 <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">file?name=html-[hash:6].html!./page.html</span><span class="dl">"</span><span class="p">);</span>
 <span class="c1">// =&gt; html-109fa8.html</span>

 <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">file?name=[hash]!./flash.txt</span><span class="dl">"</span><span class="p">);</span>
 <span class="c1">// =&gt; c31e9820c001c9c4a86bce33ce43b679</span>

 <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">file?name=[sha512:hash:base64:7].[ext]!./image.png</span><span class="dl">"</span><span class="p">);</span>
 <span class="c1">// =&gt; gdyb21L.png</span>
 <span class="c1">// use sha512 hash instead of md5 and with only 7 chars of base64</span>

 <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">file?name=img-[sha512:hash:base64:7].[ext]!./image.jpg</span><span class="dl">"</span><span class="p">);</span>
 <span class="c1">// =&gt; img-VqzT5ZC.jpg</span>
 <span class="c1">// use custom name, sha512 hash instead of md5 and with only 7 chars of base64</span>

 <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">file?name=picture.png!./myself.png</span><span class="dl">"</span><span class="p">);</span>
 <span class="c1">// =&gt; picture.png</span>

 <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">file?name=[path][name].[ext]?[hash]!./dir/file.png</span><span class="dl">"</span><span class="p">)</span>
 <span class="c1">// =&gt; dir/file.png?e43b20c069c4a01867c31e98cbce33c9</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">url-loader</code> : 这个加载器的工作方式很像<code class="language-plaintext highlighter-rouge">file-loader</code>。只是当文件大小小于限制值时，它可以返回一个<code class="language-plaintext highlighter-rouge">Data Url</code>。限制值可以作为查询参数传入。默认不限制。比如：</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">url?limit=10000!./file.png</span><span class="dl">"</span><span class="p">);</span>
 <span class="c1">// =&gt; 如果"file.png"小于10kb，则转成一个DataUrl</span>
	
 <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">url?mimetype=image/png!./file.png</span><span class="dl">"</span><span class="p">);</span>
 <span class="c1">// =&gt; 指定文件的mimetype (不指定，则根据文件后缀推测.)</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">style-loader</code>、<code class="language-plaintext highlighter-rouge">css-loader</code>: 这个很常用了，不解释。推荐用法是：<code class="language-plaintext highlighter-rouge">require("style!css!./file.css");</code>,类似的还有<code class="language-plaintext highlighter-rouge">less-loader</code>，推荐使用：<code class="language-plaintext highlighter-rouge">require("style!css!less!./file.less");</code>;</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">raw-loader</code>: 把文件内容作为字符串返回。</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">var</span> <span class="nx">fileContent</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">raw!./file.txt</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div>    </div>
    <p>这里，把<code class="language-plaintext highlighter-rouge">./file.txt</code>的内容作为字符串返回。</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">html-loader</code>: 把Html文件输出成字符串。与<code class="language-plaintext highlighter-rouge">raw-loader</code>不同的是，它默认处理html中的<code class="language-plaintext highlighter-rouge">&lt;img src="image.png"&gt;</code>为<code class="language-plaintext highlighter-rouge">require("./image.png")</code>，你同时需要在你的配置中指定image文件的加载器，比如：<code class="language-plaintext highlighter-rouge">url-loader</code>或者<code class="language-plaintext highlighter-rouge">file-loader</code>。</p>

    <ul>
      <li>
        <p>你可以通过加载器的查询参数<code class="language-plaintext highlighter-rouge">attrs</code>来指定哪些html标签可以被处理。比如：<code class="language-plaintext highlighter-rouge">attrs=img:src</code>。<code class="language-plaintext highlighter-rouge">html-loader</code>默认只处理图片，你也可以通过<code class="language-plaintext highlighter-rouge">attrs</code>,告诉他也处理javascript文件，比如：</p>

        <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">html?attrs=attrs=script:src img:src!./file.html</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div>        </div>
        <p>或者</p>

        <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">html?attrs[]=script:src&amp;attrs[]=img:src!./file.html</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div>        </div>
        <p>多个标签用空格分隔或者使用数组设定。</p>
      </li>
      <li>
        <p>你也可以告诉加载器，什么都不转换，包括默认处理的<code class="language-plaintext highlighter-rouge">image</code>。如下设置：</p>

        <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">html?attrs=false!./file.html</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div>        </div>

        <p>或者</p>

        <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">html?-attrs!./file.html</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>当使用<code class="language-plaintext highlighter-rouge">webpack --optimize-minimize</code>时，<code class="language-plaintext highlighter-rouge">html-loader</code>会对加载的html内容最小化。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">source-map-loader</code>: 方便调试，不解释。</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
   <span class="na">module</span><span class="p">:</span> <span class="p">{</span>
     <span class="na">preLoaders</span><span class="p">:</span> <span class="p">[</span>
       <span class="p">{</span>
         <span class="na">test</span><span class="p">:</span> <span class="sr">/</span><span class="se">[\.</span><span class="sr">-</span><span class="se">]</span><span class="sr">min</span><span class="se">\.</span><span class="sr">js$/</span><span class="p">,</span>
         <span class="na">loader</span><span class="p">:</span> <span class="dl">"</span><span class="s2">source-map-loader</span><span class="dl">"</span>
       <span class="p">}</span>
     <span class="p">]</span>
   <span class="p">}</span>
 <span class="p">};</span>
</code></pre></div>    </div>

    <p>上例，是对后缀为<code class="language-plaintext highlighter-rouge">.min.js</code>或者<code class="language-plaintext highlighter-rouge">-min.js</code>结尾的文件，做<code class="language-plaintext highlighter-rouge">source-map</code>操作。不过，你要确保<code class="language-plaintext highlighter-rouge">min.js</code>文件中按规范指定了<code class="language-plaintext highlighter-rouge">//# sourceMappingURL=xxxx.map</code>才行！</p>
  </li>
</ol>

<h2 id="五总结">五、总结</h2>

<p>我们讨论了常用的<code class="language-plaintext highlighter-rouge">loader</code>，包括：<code class="language-plaintext highlighter-rouge">imports-loader</code>、<code class="language-plaintext highlighter-rouge">exports-loader</code>、<code class="language-plaintext highlighter-rouge">expose-loader</code>、<code class="language-plaintext highlighter-rouge">script-loader</code>、<code class="language-plaintext highlighter-rouge">file-loader</code>、<code class="language-plaintext highlighter-rouge">url-loader</code>、<code class="language-plaintext highlighter-rouge">css-loader</code>、<code class="language-plaintext highlighter-rouge">style-loader</code>、<code class="language-plaintext highlighter-rouge">raw-loader</code>、<code class="language-plaintext highlighter-rouge">html-loader</code>、<code class="language-plaintext highlighter-rouge">source-map-loader</code>。</p>

<p>官网还提供了一些其他的<code class="language-plaintext highlighter-rouge">loader</code>，你也可以根据个性化需要，自定义一个<code class="language-plaintext highlighter-rouge">loader</code>。这里就不再继续讨论了。</p>

<p>更多<code class="language-plaintext highlighter-rouge">webpack</code>的知识可以从官网获取。网上也有一些不错的第三方入门的博文，比如下面两个：</p>

<ul>
  <li><a href="https://github.com/petehunt/webpack-howto">github.com/petehunt/webpack-howto</a></li>
  <li><a href="http://christianalfoni.github.io/react-webpack-cookbook/">christianalfoni.github.io/react-webpack-cookbook/</a></li>
</ul>
:ET