I"$M<h2 id="一插入新元素">一、插入新元素</h2>

<p>首先，操作DOM要分为两类，(1)操作属性；(2)操作元素；而此处暂时只分析操作DOM树中的元素。</p>

<p>在学习jQuery以来，我们使用最多的要数<code class="language-plaintext highlighter-rouge">$()</code>了，通过传递document判断文档是否加载完成，</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$(document).ready(....);
</code></pre></div></div>

<p>通过传递一个CSS选择符来选择DOM树中的元素，生成一个包含所选元素的jQuery对象，</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$('.div') 	// 选择DOM树中所有类名为“div”的元素，即class='div'
</code></pre></div></div>

<p>现在再向大家介绍<code class="language-plaintext highlighter-rouge">$()</code>的另一个用法，就是创建新的DOM元素，</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$('&lt;div class="create by jquery"&gt;create by jquery&lt;/div&gt;');
</code></pre></div></div>

<p>就像上面代码所示，只要为<code class="language-plaintext highlighter-rouge">$()</code>传递一个html的字符串，jQuery将会创建一个对应的DOM元素，当然这仅仅是创建了一个DOM元素，没有添加到DOM中，因而无法显示出来！</p>

<p>而jQuery中将创建元素插入到DOM树的方法有八个，它们分别是：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.append   / .prepend   / .after       / .before
.appendTo / .prependTo / .insertAfter / .insertBefore
</code></pre></div></div>

<p>它们的功能都是插入元素，但是其插入方式有比较大的差异。</p>

<p><strong><em>.append( content )和.appendTo( selector )</em></strong></p>

<p>append，在所以匹配元素的<strong>内部</strong>的<strong>末尾</strong>插入content，匹配元素就是调用此方法的jQuery对象中所包含的DOM元素，</p>

<p>appendTo，将匹配的元素插入到selector选择器匹配的元素的<strong>内部</strong>的<strong>末尾</strong>中，当前这里匹配的元素跟上面的是一样的，可能唯一有些区别的是，这里的匹配元素可以使用上面所说的方法创建的jQuery对象。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$('body').append('&lt;div class="create by jquery"&gt;create by jquery&lt;/div&gt;');

$('&lt;div class="create by jquery"&gt;create by jquery&lt;/div&gt;').appendTo('body');
</code></pre></div></div>

<p>上面所示两行代码，虽然书写方式不同，但是其含义与实现的功能都是一样的，就是将html代码，</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div class="create by jquery"&gt;create by jquery&lt;/div&gt;
</code></pre></div></div>

<p>添加到<code class="language-plaintext highlighter-rouge">&lt;body&gt;</code>元素的末尾，而实际上也真是这样，可以将代码复制到<a href="http://jsfiddle.net/" title="JSFiddle.net">JSFiddle.net</a>进行测试，看是否将元素插入到了DOM树中。</p>

<p><strong><em>.prepend( content )和.prependTo( selector )</em></strong></p>

<p>这两个函数与前面的append与appendTo类似，只不过这两个函数是将元素插入匹配元素<strong>内部</strong>的<strong>开始</strong>，而不是末尾，</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$('body').prepend('&lt;div class="create by jquery"&gt;create by jquery&lt;/div&gt;');

$('&lt;div class="create by jquery"&gt;create by jquery&lt;/div&gt;').prependTo('body');
</code></pre></div></div>

<p>运行结果就不再过多的描述了，感兴趣的可以去<a href="http://jsfiddle.net/" title="JSFiddle.net">JSFiddle.net</a>进行测试！</p>

<p><strong><em>.after( content )和.insertAfter( selector )</em></strong></p>

<p>after，在每个匹配元素<em>外部</em>的后面插入content，</p>

<p>insertAfter，将匹配的元素插入到selector选择符匹配的元素的<strong>外部</strong>的后面，</p>

<p>这里要说一下的是，这里的<strong>外部</strong>和前面的<strong>内部</strong>，将的是元素的外部或内部，其内在含义就是：</p>

<p>(1)、在内部插入元素，表示将插入的元素作为自己的内容插入，即对某个<code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>元素调用内部插入元素方法，那么结果就是：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div&gt;（原来的内容）+（添加的内容）&lt;/div&gt;
</code></pre></div></div>

<p>原来的内容加上新添加的内容作为行的<code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>元素的内容。</p>

<p>(2)、在外部插入元素，表示将新插入的元素灬内容作为自动的兄弟结点，例如对class为div的元素进行<strong>外部</strong>插入一个class为after的<code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>元素，结果就如下所示：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div class='div'&gt; content  &lt;/div&gt;
&lt;div class='after'&gt; content 1 &lt;/div&gt;
</code></pre></div></div>

<p><strong><em>.before( content )和.insertBefore( selector )</em></strong></p>

<p>这两个方法与after和insertAfter类似，都是将内容插入到匹配元素<strong>外部</strong>，而不同的是这两个方法是将内容插入匹配元素的<strong>外部</strong>的<strong>前面</strong>。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$('.div').before('&lt;div class="before"&gt; content &lt;/div&gt;');

$('&lt;div class="before"&gt; content &lt;/div&gt;').insertBefore('.div');
</code></pre></div></div>

<p>这两行代码的含义是一样的，将<code class="language-plaintext highlighter-rouge">&lt;div class='before'&gt; content &lt;/div&gt;</code>作为所以包含class为div的元素兄长结点插入，即将该html插入到匹配结点之前，结果如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div class='before'&gt; content &lt;/div&gt;
&lt;div class='div'&gt; content &lt;/div&gt;
</code></pre></div></div>

<h2 id="二移动元素">二、移动元素</h2>

<p>用于测试的html文档：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;html&gt;
	&lt;body&gt;
		&lt;div class='div'&gt;
			&lt;span class='span'&gt;&amp;lt;span&amp;gt;&lt;a class='a' href='#'&gt;&amp;lt;a&amp;gt;&lt;/a&gt;&lt;/span&gt;
			&lt;p class='p'&gt;&amp;lt;p&amp;gt;&lt;/p&gt;
		&lt;/div&gt;
	&lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>

<p>前面通过<code class="language-plaintext highlighter-rouge">$()</code>创建DOM元素，然后通过8个方法将其添加到DOM树中，其中</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.appendTo / .prependTo / .insertAfter / .insertBefore
</code></pre></div></div>

<p>这四个方法调用对象为jQuery实例对象，即这四个方法运行的上下文环境是一个jQuery对象实例，而接收的参数为一个CSS选择符，因而它们能完成一项感觉跟它们完全没关系的功能。</p>

<p>它们可以作为插入节点元素的方法，但是这四个方法同样可以移动DOM中元素节点的位置；</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$('.a').appendTo('body');
</code></pre></div></div>

<p>执行上面的jQuery代码过后，可以看到如下的html：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;html&gt;
	&lt;body&gt;
		&lt;div class='div'&gt;
			&lt;span class='span'&gt;&amp;lt;span&amp;gt;&lt;/span&gt;
			&lt;p class='p'&gt;&amp;lt;p&amp;gt;&lt;/p&gt;
		&lt;/div&gt;
		&lt;a class='a' href='#'&gt;&amp;lt;a&amp;gt;&lt;/a&gt;
	&lt;/body&gt;
&lt;/html&gt;	
</code></pre></div></div>

<p>可以看出，<code class="language-plaintext highlighter-rouge">.appendTo</code>和<code class="language-plaintext highlighter-rouge">.prependTo</code>继承了它们是在匹配元素<strong>内部</strong>操作的，那么由此可见<code class="language-plaintext highlighter-rouge">insertAfter</code>和<code class="language-plaintext highlighter-rouge">insertBefore</code>将会是在匹配元素<strong>外部</strong>操作的，如：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$('.a').insertAfter('body');
</code></pre></div></div>

<p>结果如下所示：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;html&gt;
	&lt;body&gt;
		&lt;div class='div'&gt;
			&lt;span class='span'&gt;&amp;lt;span&amp;gt;&lt;/span&gt;
			&lt;p class='p'&gt;&amp;lt;p&amp;gt;&lt;/p&gt;
		&lt;/div&gt;
	&lt;/body&gt;
	&lt;a class='a' href='#'&gt;&amp;lt;a&amp;gt;&lt;/a&gt;
&lt;/html&gt;	
</code></pre></div></div>

<p>有了这四个方法，就可以根据需求在DOM树中，将需要的节点移动到另一个位置。</p>

<h2 id="三包装元素">三、包装元素</h2>

<p>有时候，需要给很多个段落（即，<code class="language-plaintext highlighter-rouge">&lt;p&gt;</code>元素的内容）编号时，有人可能会想用循环为每个元素编号，或者高大上一点通过each遍历来实现，在学习jQuery之前我可能跟你一样，在学了jQuery之后，再也不需要那么麻烦了，jQuery想到了这一块，为我们提供了相应的方法，首先来看下一下效果吧，html如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;body&gt;
	&lt;p&gt;段落一，这仅仅是一些测试文字！&lt;/p&gt;
	&lt;p&gt;段落二，这仅仅是一些测试文字！&lt;/p&gt;
	&lt;p&gt;段落三，这仅仅是一些测试文字！&lt;/p&gt;
	&lt;p&gt;段落四，这仅仅是一些测试文字！&lt;/p&gt;
	&lt;p&gt;段落五，这仅仅是一些测试文字！&lt;/p&gt;
&lt;/body&gt;
</code></pre></div></div>

<p>jQuery中提供了相应的包装元素的方法：<code class="language-plaintext highlighter-rouge">.wrap( content )</code>、<code class="language-plaintext highlighter-rouge">.wrapAll( content )</code>以及<code class="language-plaintext highlighter-rouge">.wrapInner( content )</code>方法；</p>

<p><strong><em>wrap( content )</em></strong></p>

<p>将匹配的每个元素包装在content中，</p>

<p><strong><em>wrapAll( content )</em></strong></p>

<p>将匹配的每个元素作为一个党员包装在content中，</p>

<p><strong><em>wrapInner( content )</em></strong></p>

<p>将匹配的每个元素<strong>内部的内容</strong>包装在content中。</p>

<p>有了这3个方法，相信实现起来不难了吧：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$('p').wrapAll('&lt;ol&gt;&lt;/ol&gt;')
	  .wrap('&lt;li&gt;&lt;/li&gt;')
	  .wrapInner('&lt;i&gt;&lt;/i&gt;');
</code></pre></div></div>

<p>首先用一对闭合的<code class="language-plaintext highlighter-rouge">&lt;ol&gt;&lt;/ol&gt;</code>（<code class="language-plaintext highlighter-rouge">&lt;ol&gt;</code>元素用于有序编号，<code class="language-plaintext highlighter-rouge">&lt;ul&gt;</code>元素用于无序编号），通过<code class="language-plaintext highlighter-rouge">.wrapAll()</code>方法，将所有的段落均包含在内，如：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;ol&gt;
	&lt;p&gt;段落一，这仅仅是一些测试文字！&lt;/p&gt;
	&lt;p&gt;段落二，这仅仅是一些测试文字！&lt;/p&gt;
	&lt;p&gt;段落三，这仅仅是一些测试文字！&lt;/p&gt;
	&lt;p&gt;段落四，这仅仅是一些测试文字！&lt;/p&gt;
	&lt;p&gt;段落五，这仅仅是一些测试文字！&lt;/p&gt;
&lt;/ol&gt;
</code></pre></div></div>

<p>因为调用<code class="language-plaintext highlighter-rouge">.wrapAll()</code>方法返回的，是一个包装<code class="language-plaintext highlighter-rouge">&lt;ol&gt;</code>元素之后的对所有段落元素的引用的jQuery对象，可以继续对其调用jQuery实例方法，<code class="language-plaintext highlighter-rouge">.wrap()</code>将匹配的每一个元素包装在参数所给的内容中，则结果如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;ol&gt;
	&lt;li&gt;&lt;p&gt;段落一，这仅仅是一些测试文字！&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;段落二，这仅仅是一些测试文字！&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;段落三，这仅仅是一些测试文字！&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;段落四，这仅仅是一些测试文字！&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;段落五，这仅仅是一些测试文字！&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</code></pre></div></div>

<p>这就完成了对所有段落的有序编号，只有两行代码，比自己写循环要简单非常非常的多，使用起来也非常的方便。</p>

<p>在看到了两个包装方法的应用后，再来看下最后一个<code class="language-plaintext highlighter-rouge">.wrapInner()</code>，将匹配元素每个元素<strong>内部的内容</strong>包装在所给参数值，其含义很明显了，就是将段落的内容保存到常熟中，其运行结果如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// &lt;i&gt;：倾斜
&lt;ol&gt;
	&lt;li&gt;&lt;p&gt;&lt;i&gt;段落一，这仅仅是一些测试文字！&lt;/i&gt;&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;&lt;i&gt;段落二，这仅仅是一些测试文字！&lt;/i&gt;&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;&lt;i&gt;段落三，这仅仅是一些测试文字！&lt;/i&gt;&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;&lt;i&gt;段落四，这仅仅是一些测试文字！&lt;/i&gt;&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;&lt;i&gt;段落五，这仅仅是一些测试文字！&lt;/i&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</code></pre></div></div>

<h2 id="四替换">四、替换</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;p&gt;&lt;b&gt;段落一，这仅仅是一些测试文字！&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;段落二，这仅仅是一些测试文字！&lt;/p&gt;
&lt;p&gt;段落三，这仅仅是一些测试文字！&lt;/p&gt;
</code></pre></div></div>

<p>在jQuery的DOM操作方法中，jQuery为我们提供了两个替换方面的方法：<code class="language-plaintext highlighter-rouge">.replaceWith( content )</code>和<code class="language-plaintext highlighter-rouge">.replaceAll( selector )</code>。还有两个设置匹配元素值的方法，也可以类似的看成是替换：<code class="language-plaintext highlighter-rouge">html()</code>和<code class="language-plaintext highlighter-rouge">text()</code>方法，</p>

<p><strong><em>replaceWith( content )</em></strong></p>

<p>将匹配的元素替换为content，</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$('p').replaceWith('by replaceWith ! ');

// 结果
by replaceWith ! 
by replaceWith ! 
by replaceWith ! 
</code></pre></div></div>

<p><strong><em>replaceAll( selector )</em></strong></p>

<p>将selector选择符匹配的元素替换为匹配的元素，</p>

<p>这里要说一下的就是，这里有两个匹配的元素，前面一个是selector（即参数）所选中的匹配元素，后面的一个是调用此方法的jQuery对象中包含的元素，即运行此方法上下文所包含的元素。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$('&lt;p&gt;无段落序号，这仅仅是一些替代文字！&lt;/p&gt;').replaceAll('p');

// 结果
&lt;p&gt;无段落序号，这仅仅是一些替代文字！&lt;/p&gt;
&lt;p&gt;无段落序号，这仅仅是一些替代文字！&lt;/p&gt;
&lt;p&gt;无段落序号，这仅仅是一些替代文字！&lt;/p&gt;
</code></pre></div></div>

<p><strong><em>html( [content] )</em></strong></p>

<p>函数参数content可省略，省略后调用此方法，会返回所有匹配元素中<strong>第一个元素</strong>的HTML内容；若不省略content，会将每个匹配的元素的HTML内容读设置为content。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$('p').html();  // &lt;p&gt;段落一，这仅仅是一些测试文字！&lt;/p&gt;

$('p').first().html('&lt;h2&gt;设置HTML&lt;/h2&gt;');

// 结果
&lt;p&gt;&lt;h2&gt;设置HTML&lt;/h2&gt;&lt;/p&gt;
&lt;p&gt;段落二，这仅仅是一些测试文字！&lt;/p&gt;
&lt;p&gt;段落三，这仅仅是一些测试文字！&lt;/p&gt;
</code></pre></div></div>

<p><strong><em>text( [content] )</em></strong></p>

<p>跟<code class="language-plaintext highlighter-rouge">html()</code>一样，省略content，则会返回<strong>所有匹配元素</strong>的文本内容，返回一个字符串；若不省略content，则设置每个匹配元素的文本内容为传入值content。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$('p').text();
// 段落一，这仅仅是一些测试文字！段落二，这仅仅是一些测试文字！段落三，这仅仅是一些测试文字！

$('p').text('&lt;b&gt;无段落序号，这仅仅是一些替代文字！&lt;/b&gt;');

// 结果
&lt;p&gt;&amp;lt;b&amp;gt;无段落序号，这仅仅是一些替代文字！&amp;lt;/b&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;b&amp;gt;无段落序号，这仅仅是一些替代文字！&amp;lt;/b&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;b&amp;gt;无段落序号，这仅仅是一些替代文字！&amp;lt;/b&amp;gt;&lt;/p&gt;
</code></pre></div></div>

<h2 id="五复制元素">五、复制元素</h2>

<p>复制元素jQuery中只提供了一个方法<code class="language-plaintext highlighter-rouge">clone( [ boolean ] )</code>方法，</p>

<p>默认情况下，<code class="language-plaintext highlighter-rouge">.clone()</code>方法不会复制匹配的元素或其后代元素中绑定的事件，不过，当为此函数传递一个true的boolean值时，就可以连同事件一起赋值，即<code class="language-plaintext highlighter-rouge">.clone( true )</code>。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// html
&lt;button id='btn1'&gt;测试复制&lt;/button&gt;

// js
$('#btn1').click(function(){
	alert('测试复制事件！');
});

$('#btn1').clone(true).appendTo('body');
</code></pre></div></div>

<p>测试结果是，点击复制的按钮也会弹出警示框显示<code class="language-plaintext highlighter-rouge">测试复制事件！</code>，而没有设置参数的时候，点击复制后的按钮不会有任何相应。</p>

<p>&lt;/br&gt;</p>

<p>===</p>

<p><strong>未完待续。。。</strong></p>

:ET