I"'&<h3 id="一概述">一、概述</h3>

<p><code class="language-plaintext highlighter-rouge">Apache Commons Pool</code>库提供了一整套用于实现对象池化的API，以及若干种各具特色的对象池实现。2.0版本，并非是对1.x的简单升级，而是一个完全重写的对象池的实现，显著的提升了性能和可伸缩性，并且包含可靠的实例跟踪和池监控。第二版要求JDK1.6+。</p>

<h3 id="二下载">二、下载</h3>

<p>官方下载页:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://commons.apache.org/proper/commons-pool/download_pool.cgi
</code></pre></div></div>

<p>源码：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>svn checkout http://svn.apache.org/repos/asf/commons/proper/pool/trunk commons-pool2
</code></pre></div></div>

<p>Maven工程依赖</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
    &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;
    &lt;version&gt;2.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<h3 id="三使用说明">三、使用说明</h3>

<h4 id="31-创建池化对象">3.1 创建池化对象</h4>

<p>创建池化对象很简单，只要实现<code class="language-plaintext highlighter-rouge">commons-pool</code>的<code class="language-plaintext highlighter-rouge">PooledObjectFactory</code>工厂接口就行了。</p>

<p><code class="language-plaintext highlighter-rouge">PooledObjectFactory</code>是一个池化对象工厂接口，定义了生成对象、激活对象、钝化对象、销毁对象的方法，如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public interface PooledObjectFactory&lt;T&gt; {
    PooledObject&lt;T&gt; makeObject();
    void activateObject(PooledObject&lt;T&gt; obj);
    void passivateObject(PooledObject&lt;T&gt; obj);
    boolean validateObject(PooledObject&lt;T&gt; obj);
    void destroyObject(PooledObject&lt;T&gt; obj);
}
</code></pre></div></div>
<p>它创建并管理<code class="language-plaintext highlighter-rouge">PooledObject</code>。<code class="language-plaintext highlighter-rouge">PooledObject</code>包含了池化的对象实例，以及这些实例的池化属性，比如创建时间、最后使用时间等等。</p>

<p>如果需要使用<code class="language-plaintext highlighter-rouge">Commons-Pool</code>，那么你就需要提供一个<code class="language-plaintext highlighter-rouge">PooledObjectFactory</code>接口的具体实现。一个比较简单的办法就是，继承<code class="language-plaintext highlighter-rouge">BasePooledObjectFactory</code>这个抽象类。而继承这个抽象类，只需要实现两个方法:<code class="language-plaintext highlighter-rouge">create()</code>和<code class="language-plaintext highlighter-rouge">wrap(T obj)</code>。</p>

<p>实现<code class="language-plaintext highlighter-rouge">create()</code>方法很简单，而实现<code class="language-plaintext highlighter-rouge">wrap(T obj)</code>也有捷径，可以使用类<code class="language-plaintext highlighter-rouge">DefaultPooledObject </code>，代码可以参考如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Override
public PooledObject&lt;Foo&gt; wrap(Foo foo) {
    return new DefaultPooledObject&lt;Foo&gt;(foo);
}
</code></pre></div></div>

<p>比如，一个完整的例子：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>package test.test;

import org.apache.commons.pool2.BasePooledObjectFactory;
import org.apache.commons.pool2.PooledObject;
import org.apache.commons.pool2.impl.DefaultPooledObject;

public class StringBufferFactory extends BasePooledObjectFactory&lt;StringBuffer&gt; {

	@Override
	public StringBuffer create() throws Exception {
		return new StringBuffer();
	}

	@Override
	public PooledObject&lt;StringBuffer&gt; wrap(StringBuffer obj) {
		return new DefaultPooledObject&lt;StringBuffer&gt;(obj);
	}

}
</code></pre></div></div>

<p>有时候，单用对池内所有对象一视同仁的对象池，并不能解决问题。例如，有时需要通过key来获取不同的对象，这样，就有可能取出不合用的对象的麻烦。当然，可以通过为每一组参数相同的同类对象建立一个单独的对象池来解决这个问题。但是，如果使用普通的<code class="language-plaintext highlighter-rouge">ObjectPool</code>来实施这个计策的话，因为普通的<code class="language-plaintext highlighter-rouge">PooledObjectFactory</code>只能生产出大批设置完全一致的对象，就需要为每一组参数相同的对象编写一个单独的<code class="language-plaintext highlighter-rouge">PooledObjectFactory</code>，工作量相当可观。这种时候就可以使用<code class="language-plaintext highlighter-rouge">BaseKeyedPooledObjectFactory</code>来替代<code class="language-plaintext highlighter-rouge">BasePooledObjectFactory</code>.这个类，实现的是<code class="language-plaintext highlighter-rouge">KeyedPooledObjectFactory</code>接口，和<code class="language-plaintext highlighter-rouge">PooledObjectFactory</code>接口类似，只是在相关的方法中多了<code class="language-plaintext highlighter-rouge">Key</code>参数,定义如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public interface KeyedPoolableObjectFactory&lt;K,V&gt; {
    PooledObject&lt;V&gt; makeObject(K key);
    void activateObject(K key, PooledObject&lt;V&gt; obj);
    void passivateObject(K key, PooledObject&lt;V&gt; obj);
    boolean validateObject(K key, PooledObject&lt;V&gt; obj);
    void destroyObject(K key, PooledObject&lt;V&gt; obj);
}
</code></pre></div></div>

<h4 id="32-创建对象池">3.2 创建对象池</h4>

<p>在<code class="language-plaintext highlighter-rouge">org.apache.commons.pool2.impl</code>中预设了三个可以直接使用的对象池：<code class="language-plaintext highlighter-rouge">GenericObjectPool</code>、<code class="language-plaintext highlighter-rouge">GenericKeyedObjectPool</code>和<code class="language-plaintext highlighter-rouge">SoftReferenceObjectPool</code>。</p>

<p>通常使用<code class="language-plaintext highlighter-rouge">GenericObjectPool</code>来创建对象池，如果是对象池是<code class="language-plaintext highlighter-rouge">Keyed</code>的，那么可以使用<code class="language-plaintext highlighter-rouge">GenericKeyedObjectPool</code>来创建对象池。这两个类都提供了丰富的配置选项。这两个对象池的特点是可以设置对象池中的对象特征，包括LIFO方式、最大空闲数、最小空闲数、是否有效性检查等等。两者的区别如前面所述，后者支持<code class="language-plaintext highlighter-rouge">Keyed</code>。</p>

<p>而<code class="language-plaintext highlighter-rouge">SoftReferenceObjectPool</code>对象池，它利用一个<code class="language-plaintext highlighter-rouge">java.util.ArrayList</code>对象来保存对象池里的对象。不过它并不在对象池里直接保存对象本身，而是保存它们的“软引用”（<code class="language-plaintext highlighter-rouge">Soft Reference</code>）。这种对象池的特色是：可以保存任意多个对象，不会有容量已满的情况发生;在对象池已空的时候，调用它的<code class="language-plaintext highlighter-rouge">borrowObject</code>方法，会自动返回新创建的实例;可以在初始化同时，在池内预先创建一定量的对象;当内存不足的时候，池中的对象可以被Java虚拟机回收。</p>

<p>举个例子:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>new GenericObjectPool&lt;StringBuffer&gt;(new StringBufferFactory());
</code></pre></div></div>

<p>我们也可以使用<code class="language-plaintext highlighter-rouge">GenericObjectPoolConfig</code>来对上面创建的对象池进行一些参数配置，创建的Config参数，可以使用<code class="language-plaintext highlighter-rouge">setConfig</code>方法传给对象池，也可以在对象池的构造方法中作为参数传入。</p>

<p>举个例子：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GenericObjectPoolConfig conf = new GenericObjectPoolConfig();
conf.setMaxTotal(20);
conf.setMaxIdle(10);
...
GenericObjectPool&lt;StringBuffer&gt; pool = new GenericObjectPool&lt;StringBuffer&gt;(new StringBufferFactory(), conf);

</code></pre></div></div>

<h4 id="33-使用对象池">3.3 使用对象池</h4>

<p>对象池使用起来很方便，简单一点就是使用<code class="language-plaintext highlighter-rouge">borrowObject</code>和<code class="language-plaintext highlighter-rouge">returnObject</code>两个方法，直接给参考代码吧：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>StringBuffer buf = null;
try { 
    buf = pool.borrowObject();
    ...         
} catch(IOException e) { 
    throw e; 
} catch(Exception e) {
    throw new RuntimeException("Unable to borrow buffer from pool" + 
          e.toString());
} finally { 
    try {
        if(null != buf) {
            pool.returnObject(buf);
        }
    } catch(Exception e) {
        // ignored
    }
} 
</code></pre></div></div>
:ET