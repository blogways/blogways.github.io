I"FQ<h2 id="一前言">一、前言</h2>
<h3 id="1事件传播">1、事件传播</h3>

<p>当页面上发生一个事件时，每个层次上的DOM元素都有机会处理借个时间，如一下html为例：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div class='div'&gt;&amp;lt;div&amp;gt;
	&lt;span class='span'&gt;&amp;lt;span&amp;gt;
        	&lt;a class='a'&gt;&amp;lt;a&amp;gt;&lt;/a&gt;
    	&lt;/span&gt;
    	&lt;p class='p'&gt;&amp;lt;p&amp;gt;&lt;/p&gt;
&lt;/div&gt;
</code></pre></div></div>

<p>当使用图形表示上面的html，其结构如下图所示：</p>

<p><img src="/images/div.png" alt="对应的html图形化结构图" /></p>

<p>从上面可以看出，<code class="language-plaintext highlighter-rouge">&lt;a&gt;</code>元素位于<code class="language-plaintext highlighter-rouge">&lt;span&gt;</code>,<code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>及更外层的元素内，那么在鼠标单击<code class="language-plaintext highlighter-rouge">&lt;a&gt;</code>元素所在的区域时，明显可以看出同时也单击了其所有的父辈元素，如span、div等。也就是说，在鼠标点击内部元素时，内部元素所有的直接父辈元素也应该能获得响应这次单击的机会。</p>

<p>允许多个元素响应单击事件的策略叫做<strong><em>事件捕获</em></strong>，在事件捕获的工程中，最外层元素最先获得事件，然后向内将事件交给范围更小一级的可以捕获当前事件的元素，例如当点击<code class="language-plaintext highlighter-rouge">&lt;a&gt;</code>元素时，其捕获过程如下所示：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>document -&gt; 外层元素 -&gt; div -&gt; span -&gt; a
</code></pre></div></div>

<p>这里的外层元素就是div元素的所有直接父辈元素，值得注意的是，<code class="language-plaintext highlighter-rouge">document</code>是所有DOM元素的父辈，即无论任何事件在捕获过程中，事件首先会交给<code class="language-plaintext highlighter-rouge">document</code>，然后在向跟具体的触发事件元素传递。</p>

<p>两外一种相反的策略叫做<strong><em>事件冒泡</em></strong>，即当事件发生时，会首先将事件传递给最具体的元素，此处为<code class="language-plaintext highlighter-rouge">&lt;a&gt;</code>元素，然后在逐级向外传递事件，直到停止事件传播或传递到了<code class="language-plaintext highlighter-rouge">document</code>，理出当点击<code class="language-plaintext highlighter-rouge">&lt;a&gt;</code>元素时，其冒泡过程如下所示：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a -&gt; span -&gt; div -&gt; 外层元素 -&gt; document
</code></pre></div></div>

<p>由于不同的浏览器采用的不同的事件策略，因此在DOM标准规定了同事使用两种策略：首先，事件从一般元素到具体元素逐层<strong>捕获</strong>，然后，事件再通过<strong>冒泡</strong>返回DOM树的顶层，事件处理程序可以注册到这个过程中的任何一个阶段，而jQuery中，如无特殊说明，默认将处理程序注册到<strong>冒泡</strong>阶段。</p>

<p>虽然默认是将处理程序注册到<strong>冒泡</strong>阶段，但是事件冒泡可能会导致一些无法预料的问题，例如当我们为<code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>元素添加一个mouseout时间处理程序，当用户鼠标退出<code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>元素时，会按照预期的一样触发事件处理程序，因为事件处理程序和触发事件元素都为<code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>所以不会有其他元素响应这个事件，但是当用户鼠标指针在<code class="language-plaintext highlighter-rouge">&lt;a&gt;</code>元素内移动到<code class="language-plaintext highlighter-rouge">&lt;a&gt;</code>元素外时，会触发一个mouseout事件，然后向外传递到<code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>时，会触发为<code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>元素指定的事件处理程序，这种结果显然不是所期望的。</p>

<h3 id="2事件对象">2、事件对象</h3>

<p>要解决前面所说的事件<strong>冒泡</strong>所产生的问题，就需要说到事件对象了，事件对象是一种DOM结构，它会在元素获得处理事件的机会时传递给被调用的事件的处理程序，就拿前面的例子来说，当<code class="language-plaintext highlighter-rouge">&lt;a&gt;</code>元素触发mouseout事件并冒泡到<code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>元素时，event对象对传递给<code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>元素上mouseout事件处理程序。</p>

<p><strong><em>event.target属性</em></strong></p>

<p>jQuery中，扩展了事件对象中的event.target属性（保存着发生事件的目标元素），使其在所有的浏览器中都能够是用这个属性，通过event.target，可以确定DOM中首先接收到事件的元素（即实际被单击的元素），而在事件处理程序中的this指针，是对处理事件的DOM元素的引用。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$(document).ready(function(){
	$('.div').on( 'mouseout', function(event){
		if( event.target == this ){
			alert('mouseout div');
		}
	});
});
</code></pre></div></div>

<p>上面的代码就是利用了enevt事件对象，很好的解决了前面所说的mouseout事件在冒泡阶段会导致的问题。</p>

<p><strong><em>event.stopPropagation()方法</em></strong></p>

<p>同时事件对象还提供了一个.stopPropagation()方法，用于完全阻止事件冒泡，与target类似，这个方法也是DOM标准的基本方法，但是在IE8及更早版本中无法使用，而在jQuery中扩展了这个方法，可以放心的使用。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$(document).ready(function(){
	$('.div').click(function(){
   		alert('div click');
	});
	$('.span').click(function(){
    	alert('span click');
	});
	$('.a').click(function(event){
    	alert('a click');
   		event.stopPropagation();
	});
});
</code></pre></div></div>

<p>为<code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>、<code class="language-plaintext highlighter-rouge">&lt;span&gt;</code>和<code class="language-plaintext highlighter-rouge">&lt;a&gt;</code>同时添加单击事件分别显示消息，同时在<code class="language-plaintext highlighter-rouge">&lt;a&gt;</code>元素内调用<code class="language-plaintext highlighter-rouge">event.stopPropagation();</code>，执行上面代码，当单击<code class="language-plaintext highlighter-rouge">&lt;span&gt;</code>元素时，会弹出<code class="language-plaintext highlighter-rouge">span click</code>和<code class="language-plaintext highlighter-rouge">div click</code>，但是在单击<code class="language-plaintext highlighter-rouge">&lt;a&gt;</code>元素时，只会弹出<code class="language-plaintext highlighter-rouge">a click</code>，由此可见stopPropagation方法成功阻止了事件的冒泡，事件处理程序只会被当前元素中执行，且事件不会继续冒泡，那么其它元素也就不会再触发此事件处理程序了。</p>

<p><strong><em>event.preventDefault()方法</em></strong></p>

<p>很多元素都会有默认的事件触发动作，例如：当点击一个<code class="language-plaintext highlighter-rouge">&lt;a&gt;</code>元素时，会默认跳转到指定了连接；当单击表单中的submit按钮，会默认提交当前表单。在实际操作中，我们可能会需要验证某些信息，而不希望这些元素执行默认操作，通常我们的做法是在JavaScript代码中<code class="language-plaintext highlighter-rouge">return false;</code>，返回false这种做法实际上就是组合使用了.stopPropagation和.preventDefault()，阻止事件传播，阻止元素默认触发动作。</p>

<h3 id="3事件委托">3、事件委托</h3>

<p>事件冒泡虽然可能会导致一些问题，但是也为我们带来了很多的好处，而<strong>事件委托</strong>就是利用冒泡策略来实现的，顾名思义，事件委托就是将事件处理程序委托给其它元素，让其代为处理某些元素的事件处理，当然此处的<em>其它元素</em>是指其所有直接父辈元素。</p>

<p>一种委托方式是通过<code class="language-plaintext highlighter-rouge">event.target</code>来判断是否触发特定元素的委托事件，例：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$(document).ready(function(){
	$('.div').click(function(event){
		if($(event.target).is('.p')){
			alert('delegate p to div')
		} else {
			alert('div click');
		}
	});
});
</code></pre></div></div>

<p>如上代码所示，鼠标点击<code class="language-plaintext highlighter-rouge">&lt;p&gt;</code>元素会弹出<code class="language-plaintext highlighter-rouge">delegate p to div</code>，<code class="language-plaintext highlighter-rouge">&lt;p&gt;</code>元素的事件处理程序委托给了<code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>元素，当用户单击<code class="language-plaintext highlighter-rouge">&lt;p&gt;</code>元素时，本身并无事件处理程序，因此向外冒泡，触发<code class="language-plaintext highlighter-rouge">&lt;p&gt;</code>的父元素<code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>元素的事件处理程序，其中通过<code class="language-plaintext highlighter-rouge">event.target</code>判断目标元素是<code class="language-plaintext highlighter-rouge">&lt;p&gt;</code>元素，因而调用相应的事件处理，弹出<code class="language-plaintext highlighter-rouge">dalegate p to div</code>。</p>

<p>首先要说明的是，<code class="language-plaintext highlighter-rouge">event.target</code>引用的是触发事件元素的html文档，而不是一个jQuery对象，可以在传递了事件对象的处理程序中通过如下代码显示，</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log( event.target );
</code></pre></div></div>

<p>当单击了<code class="language-plaintext highlighter-rouge">&lt;span&gt;</code>元素时，输出结果如下图所示：</p>

<p><img src="/images/eventtarget.png" alt="span的event.target" /></p>

<p>因而使用<code class="language-plaintext highlighter-rouge">$(html标签)</code>创建一个对应html标签的jQuery对象，然后通过<code class="language-plaintext highlighter-rouge">is()</code>选中元素是否是希望的元素，如果是则执行委托事件处理，否则就执行其默认处理。</p>

<p>而另一种事件委托方式，就是通过jQuery内置的事件委托，如：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$('.div').on( 'click mouseleave', '.p', function(event){
	if( event.type == 'click' ){
		alert('delegate p\'s click to div');
	} else if(event.type == 'mouseleave' ){
		alert('delegate p\'s mouseleave to div');
	}
});
</code></pre></div></div>

<p>上面代码所示，将<code class="language-plaintext highlighter-rouge">&lt;p&gt;</code>元素的click和mouseleave事件委托给了<code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>元素，当单击<code class="language-plaintext highlighter-rouge">&lt;p&gt;</code>元素时，会弹出<code class="language-plaintext highlighter-rouge">delegate p's click to div</code>，相应的当鼠标离开<code class="language-plaintext highlighter-rouge">&lt;p&gt;</code>元素区域时，会弹出<code class="language-plaintext highlighter-rouge">delegate p's mouseleave to div</code>。</p>

<p>由上面可知，可以将某元素的事件处理程序委托给其所有直接父辈元素中的某一个元素，即冒泡阶段中，某元素之后的任何事件传递元素，而document作为所有页面元素的祖先元素，将事件委托给document很方便，但是也可能因为DOM嵌套层数太多，事件冒泡阶段的传递较多，导致事件处理效率不高，所以应该尽可能选择具体的委托元素，以减少不必要的开销。</p>

<p><strong><em>早委托</em></strong></p>

<p>如果我们需要在某个页面中，处理某个链接的单击事件，并阻止其默认事件（即，单击立即跳转到相应的链接），如果我们等到文档就绪之后在为其绑定单击事件，那么可能在绑定事件处理程序之前，该链接已经被点击，然后跳转到另一个页面了。把事件处理程序绑定到document上，不再等到加载完整的DOM结构之前就运行，即将事件委托作为一个IIFE放入<code class="language-plaintext highlighter-rouge">&lt;head&gt;</code>中，一旦加载玩绑定函数立即绑定，那么后面加载html内容时，单击触发的所有事件都会冒泡到document元素，执行相应的功能，如：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(function($){
	$(document).on( 'click mouseleave', '.a', function(event){
		alert('a click');
		event.preventDefault;
	});
})(jQuery);
</code></pre></div></div>

<h3 id="3自定义事件">3、自定义事件</h3>

<p>由浏览器的DOM实现自然触发的事件对任何WEB应用来说都是至关重要的，但是jQuery代码不没有局限于此，jQuery中支持对事件的自定义，即我们可以手动为DOM元素添加一些<strong><em>自定义事件</em></strong>。</p>

<p>由于是自定义事件，因而其触发必须是手动的方式来触发，其应用方式就像函数的定义与调用一样，自定义事件就像创建一个完成某项功能的的函数，在需要完成某个功能时，通过触发方式来触发自定义事件，就像调用函数一样，如：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$(document).ready(function(){
	$(document).on( 'AlertHello', function(event){
		alert('Hello World!');
	} );
	
	$('.p').click(function(){
		$(this).trigger('AlertHello');
	});
}); 当点击`&lt;p&gt;`元素时，成功弹出`Hello World!`，当然也可以对自定义事件传递自定义参数，如：

$(document).on( 'AlertStr', function( event, str ){
	var s = str || "Hello World!";
	alert(s);
}

$('.p').click(function(){
		$(this).trigger( 'AlertStr', 'jQuery');
});
</code></pre></div></div>

<p>而此时单击<code class="language-plaintext highlighter-rouge">&lt;p&gt;</code>元素时，如你所想的，弹出的是<code class="language-plaintext highlighter-rouge">jQuery</code>。</p>

<h3 id="4移除事件处理程序">4、移除事件处理程序</h3>

<p>有绑定事件处理程序，当然也有移除绑定，在jQuery中，移除事件处理程序通常是用.off()方法来实现，如移除<code class="language-plaintext highlighter-rouge">&lt;span&gt;</code>元素的单击事件，代码如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$('.span').click(function(){
    	alert('span click');
});

$('.span').off('click');
</code></pre></div></div>

<p>再单击<code class="language-plaintext highlighter-rouge">&lt;span&gt;</code>元素时，不会弹出任何警示框了，开始为其绑定了一个单击事件，然后移除了单击事件click的事件处理程序，之后单击都不会弹出提示。</p>

<p>当然此处通过代码</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$('.span').off('click');
</code></pre></div></div>

<p>是将<code class="language-plaintext highlighter-rouge">&lt;span&gt;</code>元素的所有单击事件都移除，言外一致就是只要是click事件的处理程序就被移除，不在响应click事件，而现实中我们通常只是希望移除某个或某些特定的事件，这就要用到事件处理的命名空间了。</p>

<p>通过命名空间可以让.off()方法更具有针对性，避免移除仍需要的事件处理程序，而事件处理的命名空间，事件绑定事件处理程序的时候，附带传入的信息，用以表示一个或者一类的事件处理程序，如：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$(document).ready(function(){
	$('.p').on( 'click.alerthello', function(){
		alert('Hello!');
	});
	$('.p').on( 'click.alerthello', function(){
		alert('Hello World!');
	});
	$('.p').on( 'click.alertjquery', function(){
		alert('Hello jQuery!');
	});
	
	$('.p').off('click.alerthello');
});
</code></pre></div></div>

<p>单击<code class="language-plaintext highlighter-rouge">&lt;p&gt;</code>元素时，只弹出警示框显示<code class="language-plaintext highlighter-rouge">Hello jQuery!</code>，而另外两个没有显示，说明成功移除了click单击事件中，<code class="language-plaintext highlighter-rouge">alerthello</code>命名空间下所有的事件处理程序，而<code class="language-plaintext highlighter-rouge">alertjquery</code>命名空间下的事件处理程序仍然保留。</p>

<h3 id="5dom2级及ie-事件处理程序">5、DOM2级及IE 事件处理程序</h3>

<p>DOM2级事件定义了两个方法，addEventListener()和removeEventListener()，用于处理指定和删除事件处理程序操作，这两个方法接收三个参数：事件处理程序名称、事件处理程序函数和一个布尔值（用于表示是否在捕获阶段调用事件处理程序，默认值为false，即在冒泡阶段调用事件处理程序）。</p>

<p>IE中实现了与DOM中类似的两个方法：attachEvent()和detachEvent()，由于IE8及更早版本只支持冒泡阶段，因而这两个方法只接收两个参数：事件处理程序名称和事件处理程序函数。</p>

<p>jQuery中的为DOM元素添加和删除事件处理程序中，最底层的操作也是通过这四个方法来实现的，实现了对IE及其它浏览器的事件处理程序的兼容。</p>

<p><strong><em>addEventListener( type, listener, capture )</em></strong></p>

<ul>
  <li>type 事件处理程序类型，即要监听的事件名称，例如click mouseout mouseleave等；</li>
  <li>listener 事件处理程序的具体实现函数，当规定的事件发生时，执行该函数；</li>
  <li>capture 如果为true，表示在事件捕获阶段调用事件处理程序。</li>
</ul>

<p>addEventListener()可能被调用多次，在同一个节点上为同一种类型的事件注册多个事件句柄。但要注意，DOM不能确定多个事件句柄被调用的顺序。</p>

<p><strong><em>removeEventListener( type, listener, capture )</em></strong></p>

<ul>
  <li>type 要删除事件处理程序的类型</li>
  <li>listener 要删除的事件程序的函数</li>
  <li>capture 如果要删除是捕获阶段的事件处理程序，则为true；如果要删除的是冒泡阶段的事件处理程序，则为false</li>
</ul>

<p><strong><em>attachEvent( type, listener )</em></strong></p>

<ul>
  <li>type 事件处理程序名称，带有一个“on”前缀，例如onclick onmouseout onmouseleave等；</li>
  <li>listener 事件处理程序的具体实现函数，当规定的事件发生时，执行该函数；</li>
</ul>

<p>这个方法是一个特定与IE的事件注册方法。它和标准的addEventListener()方法（IE不支持它）具有相同的作用，只是两者传递的参数不同，而且IE中不支持<strong><em>事件捕获</em></strong>。</p>

<p><strong><em>detachEvent( type, listener )</em></strong></p>

<ul>
  <li>type 要删除的事件监听器所针对的事件的类型，带有一个on前缀。</li>
  <li>listener 要删除事件处理程序函数</li>
</ul>

<p>这个方法解除掉由attachEvent()方法所执行的事件句柄函数注册。它是removeEventListener()方法的特定与IE的替代。要为一个元素删除一个事件函数句柄，只需要使用你最初传递attachEvent()的相同参数来调用detachEvent()。</p>

<p>&lt;/br&gt;</p>

<p>===</p>

<p><strong>未完待续。。。</strong></p>

:ET