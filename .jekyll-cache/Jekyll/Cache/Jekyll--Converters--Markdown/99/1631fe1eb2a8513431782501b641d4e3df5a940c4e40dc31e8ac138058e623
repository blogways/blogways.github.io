I")<h2 id="一默认情况defaulthandlerexceptionresolver">一、默认情况：DefaultHandlerExceptionResolver</h2>
<p>DefaultHandlerExceptionResolver 是 DispatcherServlet <strong>默认</strong>的错误处理类，它会把 Spring MVC 抛出的标准异常对应一个状态码写入到 response 中，并返回默认的错误页面。</p>

<p>如果应用是一个 RESTful API 或者需要自定义错误，可以实现 HandlerExceptionResolver 或者使用 ExceptionHandler 注解等方法。</p>

<p>默认状态下 Spring MVC 异常和状态码的对应关系表：
<img src="/images/jyjsjd/exception.png" alt="exception.png" /></p>

<h2 id="二自定义情况">二、自定义情况</h2>

<h3 id="1自定义错误页面">1、自定义错误页面</h3>
<p>可以在 web.xml 中自定义错误状态码对应的错误页面：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;error-page&gt;</span>
    <span class="nt">&lt;error-code&gt;</span>404<span class="nt">&lt;/error-code&gt;</span>
    <span class="nt">&lt;location&gt;</span>/WEB-INF/jsp/errors/404.jsp<span class="nt">&lt;/location&gt;</span>
  <span class="nt">&lt;/error-page&gt;</span>
</code></pre></div></div>

<p>实际上 <code class="language-plaintext highlighter-rouge">error-code</code> 也可以是具体的异常类：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;error-page&gt;</span>
    <span class="nt">&lt;error-code&gt;</span>java.lang.NullPointerException<span class="nt">&lt;/error-code&gt;</span>
    <span class="nt">&lt;location&gt;</span>/WEB-INF/jsp/errors/error.jsp<span class="nt">&lt;/location&gt;</span>
  <span class="nt">&lt;/error-page&gt;</span>
</code></pre></div></div>

<h3 id="2自定义错误处理">2、自定义错误处理</h3>
<p>Spring MVC 的文档里给出了多个自定义错误处理的方法，我在这里总结为以下几种。</p>

<h4 id="1实现-handlerexceptionresolver-接口">（1）实现 HandlerExceptionResolver 接口</h4>
<p>HandlerExceptionResolver 接口可以处理所有 Controller <code class="language-plaintext highlighter-rouge">映射</code>（mapping）或<code class="language-plaintext highlighter-rouge">执行</code>（execution）时抛出的异常。</p>

<ul>
  <li>
    <p>实现HandlerExceptionResolver 接口，实现 <code class="language-plaintext highlighter-rouge">resolveException</code> 方法，并返回一个 <code class="language-plaintext highlighter-rouge">ModelAndView</code>。方法中的参数 <code class="language-plaintext highlighter-rouge">Exception</code>，就是要处理的异常，可以在方法体中判断异常的类型，采取不同的措施。</p>
  </li>
  <li>
    <p>SimpleMappingExceptionResolver 是一个 HandlerExceptionResolver 的实现类，它可以把 Exception 和 View 一一对应，对不同的异常返回不同的页面。它的内部存放了一个 <strong>Properties</strong>，存储对应关系。</p>
  </li>
</ul>

<h4 id="2exceptionhandler注解">（2）@ExceptionHandler注解</h4>
<p>ExceptionHandler 给 RESTful API 提供了错误处理方法。它的 <code class="language-plaintext highlighter-rouge">Value</code> 属性可以被设置为一个或一组异常类型——即方法体要处理的异常。</p>

<p>它可以被用在 @Controller 或 @ControllerAdvice 注解的类的方法上，当用在@Controller 方法上时，它会处理这个 Controller 中抛出的异常。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span> 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleController</span> <span class="o">{</span>

<span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="nc">IOException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> 
<span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">handleIOException</span><span class="o">(</span><span class="nc">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// prepare responseEntity</span>
    <span class="k">return</span> <span class="n">responseEntity</span><span class="o">;</span> 
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="3controlleradvice-restcontrolleradvice">（3）@ControllerAdvice @RestControllerAdvice</h4>
<p>使用 @ControllerAdvice 注解的类可以包含 @ExceptionHandler、@InitBinder 或 @ModelAttribute 注解的方法，它可以被 Spring MVC 自动发现和注册，可以处理所有 Controller 中用 @RequestMapping 的方法。</p>

<p>它也可以被限定只处理某些特定 Controller 的异常：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 限定为 @RestController 注解的方法</span>
<span class="nd">@ControllerAdvice</span><span class="o">(</span><span class="n">annotations</span> <span class="o">=</span> <span class="nc">RestController</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AnnotationAdvice</span> <span class="o">{}</span>

<span class="c1">// 限定为指定包中的 Controller </span>
<span class="nd">@ControllerAdvice</span><span class="o">(</span><span class="s">"org.example.controllers"</span><span class="o">)</span> 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BasePackageAdvice</span> <span class="o">{}</span>

<span class="c1">// 限定为指定的类</span>
<span class="nd">@ControllerAdvice</span><span class="o">(</span><span class="n">assignableTypes</span> <span class="o">=</span> <span class="o">{</span><span class="nc">ControllerInterface</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">AbstractController</span><span class="o">.</span><span class="na">class</span><span class="o">})</span> 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AssignableTypesAdvice</span> <span class="o">{}</span>
</code></pre></div></div>
:ET